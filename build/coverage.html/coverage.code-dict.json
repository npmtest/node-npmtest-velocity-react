{"/home/travis/build/npmtest/node-npmtest-velocity-react/test.js":"/* istanbul instrument in package npmtest_velocity_react */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-velocity-react/lib.npmtest_velocity_react.js":"/* istanbul instrument in package npmtest_velocity_react */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_velocity_react = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_velocity_react = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-velocity-react/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-velocity-react && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_velocity_react */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_velocity_react\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_velocity_react.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_velocity_react.rollup.js'] =\n            local.assetsDict['/assets.npmtest_velocity_react.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_velocity_react.__dirname + '/lib.npmtest_velocity_react.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-velocity-react/node_modules/velocity-react/index.js":"// Convenience main entrypoint if you are running with destructuring support:\n//\n//   import {VelocityComponent, VelocityTransitionGroup} from 'velocity-react';\n//\n// You can also require just the component(s) you're using:\n//\n//   var VelocityComponent = require('velocity-react/velocity-component');\n//\n// Note that if you want to use UI Pack you will need to require 'velocity' and\n// 'velocity.ui' at a top level in your app:\n//\n//   require('velocity');\n//   require('velocity-animate/velocity.ui');\n\nmodule.exports = {\n  VelocityComponent: require('./velocity-component'),\n  VelocityTransitionGroup: require('./velocity-transition-group'),\n  velocityHelpers: require('./velocity-helpers'),\n};\n","/home/travis/build/npmtest/node-npmtest-velocity-react/node_modules/velocity-react/velocity-component.js":"/*\nCopyright (c) 2015 Twitter, Inc. and other contributors\n\nComponent to add Velocity animations to one or more children. Wraps a single child without adding\nadditional DOM nodes.\n\nThe API attempts to be as declarative as possible. A single animation property declares what\nanimation the child should have. If that property changes, this component applies the new animation\nto the child on the next tick.\n\nBy default, the animation is not run when the component is mounted. Instead, Velocity's \"finish\"\ncommand is used to jump to the animation's end state. For a component that animates out of and\nback in to a default state, this allows the parent to specify the \"animate into\" animation as\nthe default, and therefore not have to distinguish between the initial state and the state to\nreturn to after animating away.\n\nProperties:\n animation: Either an animation key or hash defining the animation. See Velocity's documentation\n   for what this can be. (It is passed to Velocity exactly.)\n runOnMount: If true, runs the animation even when the component is first mounted.\n targetQuerySelector: By default, this component's single child is animated. If targetQuerySelector\n   is provided, it is used to select descendants to apply the animation to. Use with caution, only\n   when you're confident that React's reconciliation will preserve these nodes during animation.\n   Also note querySelectorAll's silly behavior w.r.t. pruning results when being called on a node.\n   A special value of \"children\" will use the direct children of the node, since there isn't a\n   great way to specify that to querySelectorAll.\n\nUnrecognized properties are passed as options to Velocity (e.g. \"duration\", \"delay\", \"loop\").\n\nMethods:\n runAnimation: Triggers the animation immediately. Useful for when you want an animation that\n   corresponds to an event but not a particular model state change (e.g. a \"bump\" when a click\n   occurs).\n*/\n\nvar _ = {\n  forEach: require('lodash/collection/forEach'),\n  isEqual: require('lodash/lang/isEqual'),\n  keys: require('lodash/object/keys'),\n  omit: require('lodash/object/omit'),\n};\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar Velocity = require('./lib/velocity-animate-shim');\n\nvar VelocityComponent = React.createClass({\n  displayName: 'VelocityComponent',\n\n  propTypes: {\n    animation: React.PropTypes.any,\n    children: React.PropTypes.element.isRequired,\n    runOnMount: React.PropTypes.bool,\n    targetQuerySelector: React.PropTypes.string,\n    // Any additional properties will be sent as options to Velocity\n  },\n\n  getDefaultProps: function () {\n    return {\n      animation: null,\n      runOnMount: false,\n      targetQuerySelector: null,\n    }\n  },\n\n  componentDidMount: function () {\n    this.runAnimation();\n\n    // Jump to the end so that the component has the visual appearance of the animation having\n    // been run to completion.\n    if (this.props.runOnMount !== true) {\n      this._finishAnimation();\n    }\n  },\n\n  componentWillUpdate: function (newProps, newState) {\n    if (!_.isEqual(newProps.animation, this.props.animation)) {\n      this._stopAnimation();\n      this._scheduleAnimation();\n    }\n  },\n\n  componentWillUnmount: function () {\n    this._stopAnimation();\n    this._clearVelocityCache(this._getDOMTarget());\n  },\n\n  // It's ok to call this externally! By default the animation will be queued up. Pass stop: true in\n  // to stop the current animation before running. Pass finish: true to finish the current animation\n  // before running.\n  runAnimation: function (config) {\n    config = config || {};\n\n    this._shouldRunAnimation = false;\n\n    if (!this.isMounted() || this.props.animation == null) {\n      return;\n    }\n\n    if (config.stop) {\n      Velocity(this._getDOMTarget(), 'stop', true);\n    } else if (config.finish) {\n      Velocity(this._getDOMTarget(), 'finishAll', true);\n    }\n\n    // Delegate all props except for the ones that we have specified as our own via propTypes.\n    var opts = _.omit(this.props, _.keys(this.constructor.propTypes));\n    Velocity(this._getDOMTarget(), this.props.animation, opts);\n  },\n\n  // We trigger animations on a new tick because of a Velocity bug where adding a\n  // multi-step animation from within a complete callback causes the first 2 animations to run\n  // simultaneously.\n  _scheduleAnimation: function () {\n    if (this._shouldRunAnimation) {\n      return;\n    }\n\n    this._shouldRunAnimation = true;\n    setTimeout(this.runAnimation, 0);\n  },\n\n  // Returns one or more DOM nodes to apply the animation to. This is checked every time we start\n  // or stop an animation, which means that if an animation is proceeding but the element is removed\n  // from the page, it will run its course rather than ever being stopped. (We go this route\n  // because of difficulty in tracking what animations are currently being animated, due to both\n  // chained animations and the need to be able to \"stop\" an animation before it begins.)\n  _getDOMTarget: function () {\n    var node = ReactDOM.findDOMNode(this);\n\n    if (this.props.targetQuerySelector === 'children') {\n      return node.children;\n    } else if (this.props.targetQuerySelector != null) {\n      return node.querySelectorAll(this.props.targetQuerySelector);\n    } else {\n      return node;\n    }\n  },\n\n  _finishAnimation: function () {\n    Velocity(this._getDOMTarget(), 'finishAll', true);\n  },\n\n  _stopAnimation: function () {\n    Velocity(this._getDOMTarget(), 'stop', true);\n  },\n\n  // Velocity keeps extensive caches for all animated elements to minimize layout thrashing.\n  // This can cause a serious memory leak, keeping references to unmounted elements as well\n  // completion handlers and associated react objects. This crudely clears these references.\n  _clearVelocityCache: function (target) {\n    if (target.length) {\n      _.forEach(target, this._clearVelocityCache)\n    } else {\n      Velocity.Utilities.removeData(target, ['velocity', 'fxqueue']);\n    }\n  },\n\n  // This component does not include any DOM footprint of its own, so instead we return our\n  // child out of render(). (Render must only return a single element, which restricts us to\n  // one child. If you want to animate multiple children, provide your own wrapper element and\n  // use the \"targetQuerySelector\" prop to target its children.)\n  render: function () {\n    return this.props.children;\n  }\n});\n\nmodule.exports = VelocityComponent;\n","/home/travis/build/npmtest/node-npmtest-velocity-react/node_modules/velocity-react/lib/velocity-animate-shim.js":"// Shim to avoid requiring Velocity in Node environments, since it\n// requires window. Note that this just no-ops the components so\n// that they'll render, rather than doing something clever like\n// statically rendering the end state of any provided animations.\n//\n// TODO(finneganh): Circle back on jsdom to see if we can run full\n// Velocity with it in place. This come up in:\n// https://github.com/twitter-fabric/velocity-react/issues/119\n// but there may have been different loading issues in that case,\n// not a global incompatibility with jsdom.\nif (typeof window === 'undefined' || typeof navigator === 'undefined' || navigator.userAgent.indexOf(\"Node.js\") !== -1 || navigator.userAgent.indexOf(\"jsdom\") !== -1) {\n\n  var Velocity = function() {};\n  Velocity.Utilities = {};\n  Velocity.Utilities.removeData = function() {};\n  Velocity.velocityReactServerShim = true;\n  module.exports = Velocity;\n\n} else {\n  // this is how velocity-ui finds the Velocity instance, so lets make sure we find the right instance\n  var g = (window.jQuery || window.Zepto || window);\n\n  // require Velocity if it doesn't already exist\n  module.exports = g.Velocity ? g.Velocity : require('velocity-animate');\n\n}\n","/home/travis/build/npmtest/node-npmtest-velocity-react/node_modules/velocity-react/velocity-helpers.js":"// Copyright (c) 2015 Twitter, Inc. and other contributors\n\nvar _ = {\n  isObject: require('lodash/lang/isObject'),\n};\nvar Velocity = require('./lib/velocity-animate-shim');\n\nvar effectCounter = 0;\n\n// Takes a Velocity \"UI pack effect\" definition and registers it with a unique key, returning that\n// key (to later pass as a value for the \"animation\" property). Takes an optional suffix, which can\n// be \"In\" or \"Out\" to modify UI Pack's behavior.\n//\n// Unlike what you get from passing a style hash to VelocityComponent's \"animation\" property,\n// Velocity \"UI pack effects\" can have chained animation calls and specify a \"defaultDuration\", and\n// also can take advantage of \"stagger\" and \"reverse\" options on the VelocityComponent.\n//\n// You will need to manually register the UI Pack with the global Velocity in your application with:\n//\n//   require('velocity');\n//   require('velocity-animate/velocity.ui');\n//\n// See: http://julian.com/research/velocity/#uiPack\n//\n// Typical usage:\n//\n// var Animations = {\n//   down: VelocityHelpers.registerEffect({\n//     defaultDuration: 1100,\n//     calls: [\n//       [{\n//         transformOriginX: [ '50%', '50%' ],\n//         transformOriginY: [ 0, 0 ],\n//         rotateX: [0, 'spring'],\n//       }, 1, {\n//         delay: 100,\n//         easing: 'ease-in',\n//       }]\n//     ],\n//   }),\n//\n//   up: VelocityHelpers.registerEffect({\n//     defaultDuration: 200,\n//     calls: [\n//       [{\n//         transformOriginX: [ '50%', '50%' ],\n//         transformOriginY: [ 0, 0 ],\n//         rotateX: 160,\n//       }]\n//     ],\n//   }),\n// };\n// ...\n// <VelocityComponent animation={this.state.isUp ? Animations.up : Animations.down}>\n//   ...\n// <Velocity>\nfunction registerEffect(suffix, animation) {\n  if (_.isObject(suffix)) {\n    animation = suffix;\n    suffix = '';    \n  }\n\n  var key = 'VelocityHelper.animation.' + (effectCounter++) + suffix;\n\n  // No-op on the server for now.\n  if (Velocity.velocityReactServerShim) {\n    return key\n  }\n\n  if (Velocity.RegisterEffect === undefined) {\n    throw \"Velocity.RegisterEffect not found. You need to require 'velocity-animate/velocity.ui' at a top level for UI Pack.\";\n  }\n\n  Velocity.RegisterEffect(key, animation);\n  return key;\n}\n\nmodule.exports = {\n  registerEffect: registerEffect,\n};\n","/home/travis/build/npmtest/node-npmtest-velocity-react/node_modules/velocity-react/velocity-transition-group.js":"/*\nCopyright (c) 2015 Twitter, Inc. and other contributors\n\nComponent to add Velocity animations around React transitions. Delegates to the React TransitionGroup\naddon.\n\nProperties\n  enter: Animation to run on a child component being added\n  leave: Animation to run on a child component leaving\n  runOnMount: if true, runs the \"enter\" animation on the elements that exist as children when this\n    component is mounted.\n  enterHideStyle/enterShowStyle: see below.\n\nAny additional properties (e.g. \"className\", \"component\") will be passed to the internal\nTransitionGroup.\n\n\"enter\" and \"leave\" should either be a string naming an animation, or a hash with an\n\"animation\" key that can either be a string itself, or a hash of style attributes to animate (this\nvalue is passed to Velocity its the first arg).\n\nIf \"enter\" or \"leave\" is a hash, it can additionally have a \"style\" value that is applied the tick\nbefore the Velocity animation starts. Use this for non-animating properties (like \"position\") that\nare prerequisites for correct animation. The style value is applied using Velocity's JS -> CSS\nroutines, which may differ from React's.\n\nAny hash entries beyond \"animation\" and \"style\" are passed in an options hash to Velocity. Use this\nfor options like \"stagger\", \"reverse\", &tc.\n\nBy default, this component will immediately hide all entering children with display: 'none', and\nunhide them one tick later with display: ''. This is done so that we can coalesce multiple enters\ninto a single animation, and we want to avoid any popping of elements in while they're collected. If\nyou prefer a different way of hiding these elements so that e.g. geometry can be immediately\ncalculated, use the enterHideStyle and enterShowStyle props to provide alternate style hashes for\nhiding and revealing entering elements.\n\nStatics\n  disabledForTest: Set this to true globally to turn off all custom animation logic. Instead, this\n    component will behave like a vanilla TransitionGroup.\n\nInspired by https://gist.github.com/tkafka/0d94c6ec94297bb67091\n*/\n\nvar _ = {\n  each: require('lodash/collection/each'),\n  extend: require('lodash/object/extend'),\n  forEach: require('lodash/collection/forEach'),\n  isEqual: require('lodash/lang/isEqual'),\n  keys: require('lodash/object/keys'),\n  omit: require('lodash/object/omit'),\n  pluck: require('lodash/collection/pluck'),\n};\nvar React = require('react');\nvar ReactDOM = require('react-dom');\nvar ReactTransitionGroup = require('react-addons-transition-group');\nvar Velocity = require('./lib/velocity-animate-shim');\n\n// Shim requestAnimationFrame for browsers that don't support it, in particular IE 9.\nvar shimRequestAnimationFrame =\n  (typeof window !== 'undefined') && (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    function(callback) { window.setTimeout(callback, 0) }\n  );\n\n// Fix 'Invalid calling object' error in IE\nshimRequestAnimationFrame = (typeof window !== 'undefined') &&  shimRequestAnimationFrame.bind(window);\n\n// Internal wrapper for the transitioned elements. Delegates all child lifecycle events to the\n// parent VelocityTransitionGroup so that it can co-ordinate animating all of the elements at once.\nvar VelocityTransitionGroupChild = React.createClass({\n  displayName: 'VelocityTransitionGroupChild',\n\n  propTypes: {\n    children: React.PropTypes.element.isRequired,\n    willAppearFunc: React.PropTypes.func.isRequired,\n    willEnterFunc: React.PropTypes.func.isRequired,\n    willLeaveFunc: React.PropTypes.func.isRequired,\n  },\n\n  componentWillAppear: function (doneFn) {\n    this.props.willAppearFunc(ReactDOM.findDOMNode(this), doneFn);\n  },\n\n  componentWillEnter: function (doneFn) {\n    this.props.willEnterFunc(ReactDOM.findDOMNode(this), doneFn);\n  },\n\n  componentWillLeave: function (doneFn) {\n    this.props.willLeaveFunc(ReactDOM.findDOMNode(this), doneFn);\n  },\n\n  componentWillUnmount: function () {\n    // Clear references from velocity cache.\n    Velocity.Utilities.removeData(ReactDOM.findDOMNode(this), ['velocity', 'fxqueue']);\n  },\n\n  render: function () {\n    return React.Children.only(this.props.children);\n  },\n});\n\nvar VelocityTransitionGroup = React.createClass({\n  displayName: 'VelocityTransitionGroup',\n\n  statics: {\n    disabledForTest: false, // global, mutable, for disabling animations during test\n  },\n\n  propTypes: {\n    runOnMount: React.PropTypes.bool,\n    enter: React.PropTypes.any,\n    leave: React.PropTypes.any,\n    children: React.PropTypes.any,\n    enterHideStyle: React.PropTypes.object,\n    enterShowStyle: React.PropTypes.object,\n  },\n\n  getDefaultProps: function() {\n    return {\n      runOnMount: false,\n      enter: null,\n      leave: null,\n      enterHideStyle: {\n        display: 'none',\n      },\n      enterShowStyle: {\n        display: '',\n      },\n    };\n  },\n\n  componentWillMount: function () {\n    this._scheduled = false;\n    this._entering = [];\n    this._leaving = [];\n  },\n\n  componentWillUnmount: function () {\n    this._entering = [];\n    this._leaving = [];\n  },\n\n  render: function () {\n    // Pass any props that are not our own on into the TransitionGroup delegate.\n    var transitionGroupProps = _.omit(this.props, _.keys(this.constructor.propTypes));\n\n    // Without our custom childFactory, we just get a default TransitionGroup that doesn't do\n    // anything special at all.\n    if (!this.constructor.disabledForTest && !Velocity.velocityReactServerShim) {\n      transitionGroupProps.childFactory = this._wrapChild;\n    }\n\n    return React.createElement(ReactTransitionGroup, transitionGroupProps, this.props.children);\n  },\n\n  childWillAppear: function (node, doneFn) {\n    if (this.props.runOnMount) {\n      this.childWillEnter(node, doneFn);\n    } else {\n      this._finishAnimation(node, this.props.enter);\n\n      // Important to tick over so that any callbacks due to finishing the animation complete first.\n      // isMounted check necessary to avoid exception in tests, which can mount and unmount a\n      // component before this runs over, as the \"doneFn\" callback does a ref lookup rather than\n      // closing over the component.\n      //\n      // Using setTimeout so that doneFn gets called even when the tab is hidden.\n      var self = this;\n      window.setTimeout(function () {\n        if (self.isMounted()) {\n          doneFn();\n        }\n      }, 0);\n    }\n  },\n\n  childWillEnter: function (node, doneFn) {\n    if (this._shortCircuitAnimation(this.props.enter, doneFn)) return;\n\n    // By finishing a \"leave\" on the element, we put it in the right state to be animated in. Useful\n    // if \"leave\" includes a rotation or something that we'd like to have as our starting point, for\n    // symmetry.\n    // We use overrideOpts to prevent any \"begin\" or \"complete\" callback from triggering in this case, since\n    // it doesn't make a ton of sense.\n    this._finishAnimation(node, this.props.leave, {begin: undefined, complete: undefined});\n\n    // We're not going to start the animation for a tick, so set the node's display to none (or any\n    // custom \"hide\" style provided) so that it doesn't flash in.\n    _.forEach(this.props.enterHideStyle, function (val, key) {\n      Velocity.CSS.setPropertyValue(node, key, val);\n    });\n\n    this._entering.push({\n      node: node,\n      doneFn: doneFn,\n    });\n\n    this._schedule();\n  },\n\n  childWillLeave: function (node, doneFn) {\n    if (this._shortCircuitAnimation(this.props.leave, doneFn)) return;\n\n    this._leaving.push({\n      node: node,\n      doneFn: doneFn,\n    });\n\n    this._schedule();\n  },\n\n  // document.hidden check is there because animation completion callbacks won't fire (due to\n  // chaining off of rAF), which would prevent entering / leaving DOM nodes from being cleaned up\n  // while the tab is hidden.\n  //\n  // Returns true if this did short circuit, false if lifecycle methods should continue with\n  // their animations.\n  _shortCircuitAnimation: function (animationProp, doneFn) {\n    if (document.hidden || (this._parseAnimationProp(animationProp).animation == null)) {\n      if (this.isMounted()) {\n        doneFn();\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _schedule: function () {\n    if (this._scheduled) {\n      return;\n    }\n\n    this._scheduled = true;\n\n    // Need rAF to make sure we're in the same event queue as Velocity from here out. Important\n    // for avoiding getting wrong interleaving with Velocity callbacks.\n    shimRequestAnimationFrame(this._runAnimations);\n  },\n\n  _runAnimations: function () {\n    this._scheduled = false;\n\n    this._runAnimation(true, this._entering, this.props.enter);\n    this._runAnimation(false, this._leaving, this.props.leave);\n\n    this._entering = [];\n    this._leaving = [];\n  },\n\n  // Used to parse out the 'enter' and 'leave' properties. Handles cases where they are omitted\n  // as well as when they are just strings and not hashes of animation and options.\n  _parseAnimationProp: function (animationProp) {\n    var animation, opts, style;\n\n    if (typeof animationProp === 'string') {\n      animation = animationProp;\n      style = null;\n      opts = {};\n    } else {\n      animation = (animationProp != null) ? animationProp.animation : null;\n      style = (animationProp != null) ? animationProp.style : null;\n      opts = _.omit(animationProp, 'animation', 'style');\n    }\n\n    return {\n      animation: animation,\n      style: style,\n      opts: opts,\n    };\n  },\n\n  _runAnimation: function (entering, queue, animationProp) {\n    if (!this.isMounted() || queue.length === 0) {\n      return;\n    }\n\n    var nodes = _.pluck(queue, 'node');\n    var doneFns = _.pluck(queue, 'doneFn');\n\n    var parsedAnimation = this._parseAnimationProp(animationProp);\n    var animation = parsedAnimation.animation;\n    var style = parsedAnimation.style;\n    var opts = parsedAnimation.opts;\n\n    // Clearing display reverses the behavior from childWillAppear where all elements are added with\n    // display: none to prevent them from flashing in before the animation starts. We don't do this\n    // for the fade/slide animations or any animation that ends in \"In,\" since Velocity will handle\n    // it for us.\n    //\n    // If a custom \"enterShowStyle\" prop is passed, (i.e. not one that just reverses display: none)\n    // we always run it, regardless of the animation, since it's probably doing something around\n    // opacity or positioning that Velocity will not necessarily reset.\n    if (entering) {\n      if (!_.isEqual(this.props.enterShowStyle, {display: ''})\n        || !(/^(fade|slide)/.test(animation) || /In$/.test(animation))) {\n        style = _.extend({}, this.props.enterShowStyle, style);\n      }\n    }\n\n    // Because Safari can synchronously repaint when CSS \"display\" is reset, we set styles for all\n    // browsers before the rAF tick below that starts the animation. This way you know in all\n    // cases that you need to support your static styles being visible on the element before\n    // the animation begins.\n    if (style != null) {\n      _.each(style, function (value, key) {\n        Velocity.hook(nodes, key, value);\n      });\n    }\n\n    var self = this;\n    var doneFn = function () {\n      if (!self.isMounted()) {\n        return;\n      }\n\n      doneFns.map(function (doneFn) { doneFn(); });\n    };\n\n    // For nodes that are entering, we tell the TransitionGroup that we're done with them\n    // immediately. That way, they can be removed later before their entering animations complete.\n    // If we're leaving, we stop current animations (which may be partially-completed enter\n    // animations) so that we can then animate out. Velocity typically makes these transitions\n    // very smooth, correctly animating from whatever state the element is currently in.\n    if (entering) {\n      doneFn();\n      doneFn = null;\n    } else {\n      Velocity(nodes, 'stop');\n    }\n\n    var combinedCompleteFn;\n    if (doneFn && opts.complete) {\n      var optsCompleteFn = opts.complete;\n      combinedCompleteFn = function () {\n        doneFn();\n        // preserve this / args from Velocity so the complete function has context for what completed\n        optsCompleteFn.apply(this, arguments);\n      };\n    } else {\n      // One or the other or neither.\n      combinedCompleteFn = doneFn || opts.complete;\n    }\n\n    // Bit of a hack. Without this rAF, sometimes an enter animation doesn't start running, or is\n    // stopped before getting anywhere. This should get us on the other side of both completeFn and\n    // any _finishAnimation that's happening.\n    shimRequestAnimationFrame(function () {\n      Velocity(nodes, animation, _.extend({}, opts, {\n        complete: combinedCompleteFn,\n      }));\n    });\n  },\n\n  _finishAnimation: function (node, animationProp, overrideOpts) {\n    var parsedAnimation = this._parseAnimationProp(animationProp);\n    var animation = parsedAnimation.animation;\n    var style = parsedAnimation.style;\n    var opts = _.extend({}, parsedAnimation.opts, overrideOpts);\n\n    if (style != null) {\n      _.each(style, function (value, key) {\n        Velocity.hook(node, key, value);\n      });\n    }\n\n    if (animation != null) {\n      // Opts are relevant even though we're immediately finishing, since things like \"display\"\n      // can affect the animation outcome.\n\n      Velocity(node, animation, opts);\n      Velocity(node, 'finishAll', true);\n    }\n  },\n\n  _wrapChild: function (child) {\n    return React.createElement(VelocityTransitionGroupChild, {\n      willAppearFunc: this.childWillAppear,\n      willEnterFunc: this.childWillEnter,\n      willLeaveFunc: this.childWillLeave,\n    }, child);\n  },\n});\n\nmodule.exports = VelocityTransitionGroup;\n"}